#!/usr/bin/env bash
# SPDX-License-Identifier: MIT

# The current version of the script, intended to follow SemVer.
SHY_VERSION="0.1.0"

# Process the configured source directory.
process () {
	src="$1"
	dest="$2"
	template="$3"
	is_verbose="$4"

	# If 'cmark' is not installed, exit with an error.
	if ! command -v cmark > /dev/null; then
		printf "error: 'cmark' could not be found; please install 'cmark'\n"
		exit 1
	fi

	# If verbose, print configuration.
	if [ "$is_verbose" -eq 1 ]; then
		print_config "$src" "$dest" "$template"
	fi

	# If the source directory doesn't exist, exit with an error.
	if [ ! -d "$src" ]; then
		printf "error: '%s' directory does not exist.\n" "$src"
		exit 1
	fi

	# Make sure we don't destroy a valid directory.
	if [ -d "$dest" ] && [ ! -f "$dest/.shy" ]; then
		printf "error: %s is not a shy output directory; choose another directory or delete its contents\n" "$dest"
		exit 1
	fi

	# If the destination directory doesn't exist, create it, with a log entry
	# in verbose mode.
	if [ -d "$dest" ]; then
		if [ "$is_verbose" -eq 1 ]; then
			printf "info:  '%s' directory exists\n" "$dest"
		fi

		rm -r "$dest"
	else
		if [ "$is_verbose" -eq 1 ]; then
			printf "info:  '%s' directory does not exist\n" "$dest"
		fi
	fi
	
	mkdir -p "$dest"
	touch "$dest/.shy"
	find "${src}"/* | process_entry "$dest" "$template" "$is_verbose"
}

process_entry () {
	dest="$1"
	template="$2"
	is_verbose="$3"

	while read -r name; do
		if [ "$is_verbose" -eq 1 ]; then
			printf "info:  found '%s'\n" "$name"
		fi

		raw_name="${name#\./*/}"

		if [ -d "$name" ]; then
			mkdir -p "${dest}/${raw_name}"
		fi	

		if [ -f "$name" ]; then
			file_name=$(basename -- "$name")
			file_ext="${file_name##*.}"

			case "$file_ext" in
				"md" | "markdown" | "mdown" | "mdwn" | "mkd" | "mkdn" | "mkdown" )
					html=$(cmark "$name")
					dest_file="$dest/${raw_name%.*}.html"
					cp "$template" "$dest_file"
					echo "$html" > "$dest_file.temp"
					sed -i "/<!-- content -->/r $dest_file.temp" "$dest_file"
					rm "$dest_file.temp"
					;;
				* ) cp "$name" "$dest/$raw_name" ;;
			esac
		fi
	done
}

# Print the configuration shy is running with.
print_config () {
	printf "info:  source directory = '%s'\n" "$1"
	printf "info:  destination directory = '%s'\n" "$2"
	printf "info:  template file = '%s'\n" "$3"
}

# Print the current version of shy.
print_version () {
	printf "version %s\n" $SHY_VERSION
}

# Print the shy help text.
print_help () {
	cat << HELP
USAGE:
  shy [ OPTIONS ] [ FLAGS ]

OPTIONS:
  -s <SOURCE DIR>        the source folder to scan [default ./src]
  -d <DESTINATION DIR>   where to write the outputs [default: ./dest]
  -t <TEMPLATE FILE>     the HTML template to put Markdown into [default: template.html]
  -v                     run with verbose output

FLAGS:
  -V   print the version number and exit
  -h   print the help text and exit

EXAMPLE:
  shy -s src -d dest -t template.html

MORE INFO:
  By default, shy outputs nothing to the user unless an error arises.
  shy relies on cmark being installed on the target system; if cmark is not
  installed, shy will exit with an error.

CREDITS:
  Written by Andrew Lilley Brinker <alilleybrinker@gmail.com>.
HELP
}

# Parse arguments and run the main logic of the program.
main () {
	src_val="./src"
	dest_val="./dest"
	template_val="./template.html"
	verbose_flag=0
	while getopts "s:d:t:vhV" flag
	do
		case "${flag}" in
			V)	print_version
				exit 1;;
			h)	print_help
				exit 1;;
			s)	src_val="${OPTARG}";;
			d)	dest_val="${OPTARG}";;
			t)	template_val="${OPTARG}";;
			v)	verbose_flag=1;;
			?)	printf "usage: %s: [-V] [-h] [v] [-s <SRC>] [-d <DEST>] [-t <TEMPLATE>]\n" "$0"
				exit 1;;
		esac
	done

	process "${src_val}" "${dest_val}" "${template_val}" "$verbose_flag"
}

main "$@"


